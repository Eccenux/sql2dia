#!/usr/bin/perl

# $Id: pgsql2dia,v 0.1 2007/12/18 23:51:21 nux Exp $

use strict;
use DBI;
use Getopt::Mixed "nextOption";
BEGIN {push @INC, '.'}
use GenDia;

my $debug = 0;
# Command line arguments
my ($banco,$host,$outfile,$username,$password,$port,$schema,$tableSet) = &getParams();

# Connect
# old PostgreSQL (probably PG10 and below)
# my $dbh = DBI->connect("dbi:PgPP:dbname=".$banco.";host=".$host.";port=".$port, $username, $password) or die "Error with DB connection.";
my $dbh = DBI->connect("dbi:Pg:dbname=".$banco.";host=".$host.";port=".$port, $username, $password, 
    { RaiseError => 1, PrintError => 0, AutoCommit => 1 })
    or die "Error with DB connection: $DBI::errstr";

# Get database data
my %data;

# Switch on $tableSet (set of tables name)
my $sql;
if ($tableSet eq 'ML NET loans') {
	# $sql ML NET loans
	$sql = "SELECT table_name FROM information_schema.tables 
		WHERE table_type = 'BASE TABLE' AND table_schema = '".$schema."'
		AND
		(
			table_name IN ('library','reader','holding')
			OR table_name IN ('dimreader', 'document', 'inventorybook')
			OR table_name ~ 'loan'
			OR table_name ~ 'reservation'
			OR table_name ~ 'renewal'
		)	
	";
}
elsif ($tableSet eq 'ML NET DWH') {
	# $sql ML NET DWH
	$sql = "SELECT table_name FROM information_schema.tables 
		WHERE table_type = 'BASE TABLE' AND table_schema = '".$schema."'
		AND
		(
			table_name IN ('library','reader','holding')
			OR
			table_name LIKE 'dim%'
			OR
			table_name LIKE 'fact%'
		)
	";
}
elsif ($tableSet eq 'ML NET documents') {
	# $sql ML NET documents
	$sql = "SELECT table_name FROM information_schema.tables 
		WHERE table_type = 'BASE TABLE' AND table_schema = '".$schema."'
		AND
		(
			table_name IN ('holding', 'bibliographicdatabase')
			OR table_name ~ 'document'
			OR table_name ~ 'collection'
			OR table_name ~ 'copub'
			OR table_name ~ 'entry'
			OR table_name ~ 'title'
			OR table_name ~ 'series'
		)	
	";
}
elsif ($tableSet eq 'ML NET fact-holdings') {
	# $sql ML NET documents
	$sql = "SELECT table_name FROM information_schema.tables 
		WHERE table_type = 'BASE TABLE' AND table_schema = '".$schema."'
		AND
		(
			table_name IN ('library', 'factloan', 'dimlibrary', 'holding', 'inventorybook', 'diminventorybook')
		)	
	";
}
else {
	$tableSet = "unfiltered (default)";
	# $sql unfiltered (default)
	$sql = "SELECT table_name FROM information_schema.tables 
		WHERE table_type = 'BASE TABLE' AND table_schema = '".$schema."'
	";
}

# Print chosen set info
print "Chosen set: $tableSet\n";

my $tables = &runSql($sql);
foreach my $table (@{$tables}) {
	$sql = "SELECT column_name,
		CASE WHEN character_maximum_length > 0 THEN data_type || '(' || CAST(character_maximum_length AS varchar) || ')'
			ELSE data_type
		END
	FROM information_schema.columns WHERE table_name = '".$table->[0]."' and table_schema = '".$schema."';";
	my $fields = &runSql($sql);
	foreach my $field (@{$fields}) {
		$data{$table->[0]}{FIELDS}{$field->[0]} = $field->[1];
	}
}

# Print the count of tables
my $table_count = scalar(@$tables);
print "[INFO] Number of Tables: $table_count\n";

# Print the SQL query if the count is zero
if ($table_count == 0) {
    print "[WARNING] No tables for query:\n$sql\n";
}

# debug helper
use Data::Dump qw(dump);

# Foregin keys data
# Note! Order of columns is important for Perl.
$sql = "
	SELECT
		tc.constraint_name,
		
		tc.table_name, 
		kcu.column_name, 
		
		ccu.table_name AS foreign_table_name,
		ccu.column_name AS foreign_column_name 
	FROM 
		information_schema.table_constraints AS tc 
		JOIN information_schema.key_column_usage AS kcu
		ON tc.constraint_name = kcu.constraint_name
		AND tc.table_schema = kcu.table_schema
		JOIN information_schema.constraint_column_usage AS ccu
		ON ccu.constraint_name = tc.constraint_name
		AND ccu.table_schema = tc.table_schema
	WHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_schema = '$schema'
	AND tc.constraint_name NOT like 'qrtz_%'
";
my $fk = &runSql($sql);
#dump($fk);
#die('-');

#dump(\%data);
#die('-');

# Null-ability data
$sql = "
	SELECT table_name, column_name
	FROM information_schema.columns
	WHERE IS_NULLABLE = 'YES' and table_schema = '$schema'
";
my $nullableRows = &runSql($sql);
# convert to hash map array
my %nullableData;
foreach my $row (@{$nullableRows}) {
	my $key = $row->[0].".".$row->[1];
	$nullableData{$key} = 1;
}
#if (%nullableData{$testCol}) {
#	print "\n$testCol is null-able";
#}
#dump(\%nullableData);
#die('\n-');


##
# Generate file
##
my $generator = new GenDia(debug=>$debug);
$generator->setOutfile($outfile);
$generator->setData(\%data);
$generator->setFk($fk);
$generator->setNullableData(\%nullableData);
$generator->store();

#############################################################
sub runSql {
	my $sql = shift;
	my $rows = undef;
	my $sth = $dbh->prepare($sql);
	if ( !defined $sth )
	{
		die "Cannot prepare statement: $DBI::errstr\n";
	}
#print $tables->[0]->[0];

	$sth->execute();
#print $sth;
#	if ($sth->rows) {
		$rows = $sth->fetchall_arrayref;
#	}
	$sth->finish();
	return $rows;
	
	### Fetch all the data into a Perl data structure
#	my $array_ref = $sth->fetchall_arrayref(  );
#	my $rows = $array_ref;
	
	### Traverse the data structure and dump each piece of data out
	###
	### For each row in the returned array reference ...
#	foreach my $row (@$array_ref) {
		### Split the row up and print each field ...
#		my ( $name ) = @$row;
#		print "$name\n";
#	}

#	return $rows;
}

sub usage {
	print qq|Usage:
$0 -d database [-h host] [-o outputfile] [-D] [-u user] [-p password] [--port 1234] [-s schema]
	-d           database is mandatory.
	-h           host (default is "localhost").
	-o           outputfile (default is "[database].dia").
	-D           activate debug mode.
	-u           database user name.
	-p           database password.
	--port       database port (defaults is 5432).
	-s --schema  database schema (defaults is "public").
|;
}

sub getParams {
	# defaults
	my ($db,$host,$file,$username,$password,$port,$schema,$tableSet) = ("","localhost","","root","",5432,"public","");
	# option mapping (note long options are `--long`; short are `-s`)
	Getopt::Mixed::init("d=s h=s o=s D u=s p=s port=s s=s tableSet=s schema>s");
	while (my ($option, $value) = nextOption()) {
		# test options
		#print "option: $option, value: $value\n";

		# map options
		if($option eq "d") {
			$db = $value;
		} elsif ($option eq "h") {
			$host = $value;
		} elsif ($option eq "o") {
			$file = $value;
		} elsif ($option eq "D") {
			print "Debug mode activated.\n";
			$debug++;
		} elsif ($option eq "u") {
			$username = $value
		} elsif ($option eq "p") {
			$password = $value
		} elsif ($option eq "tableSet") {
			$tableSet = $value
		} elsif ($option eq "port") {
			$port = $value
		} elsif ($option eq "s") {
			$schema = $value
		}
	}
	Getopt::Mixed::cleanup();
	if(!$db) {
		&usage();
		exit(1);
	} else {
		if(!$file) {
			$file = $db.'.dia';
		}
	}
	return ($db,$host,$file,$username,$password,$port,$schema,$tableSet);
}

1;

